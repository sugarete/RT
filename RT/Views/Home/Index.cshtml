@model List<RT.Models.ChatContext>

@{
    Layout = "~/Views/Shared/_LayoutPage2.cshtml";
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Acronics Chat-App</title>
    <link href="Content/bootstrap.css" rel="stylesheet" />
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }

        .header {
            background-color: #4267B2;
            color: #fff;
            padding: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 10px;
            font-weight: bold;
        }

        .app-name {
            font-size: 50px;
            font-family: Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif;
        }

        .user-info {
            align-items: center;
        }

        #username {
            margin-right: 5px;
        }

        .chat-container {
            max-width: 400px;
            margin: 20px auto;
            border: 1px solid #ccc;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .chat-header {
            background-color: #4267B2;
            color: #fff;
            padding: 10px;
        }

        .chat-messages {
            max-height: 900px;
            overflow-y: auto;
            padding: 1px;
        }

        .chat-input {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            background-color: #f5f5f5;
            border-top: 1px solid #ccc;
        }

        #message-input {
            flex: 1;
            padding: 8px;
            border: none;
            border-radius: 5px;
            margin-right: 10px;
        }

        .chat-input button {
            padding: 8px;
            border: none;
            border-radius: 5px;
            background-color: #4267B2;
            color: #fff;
            cursor: pointer;
        }

        .logout {
            display: flex;
            align-items: center;
            font-family: var(--font-family-MontserratRegular);
            font-size: 14px;
            color: #E70202;
            width: 100%;
        }
    </style>
</head>

<body>
    <header class="header">
        <div class="app-name w-100 text-center">ACS Chat App</div>
    </header>

    <div class="chat-container">
        <div class="chat-header d-flex align-items-center justify-content-between">
            BOX CHAT
            <span id="username">Account: @Session["Username"]</span>
            @Html.ActionLink("Logout", "Logout", "Account", routeValues: null, htmlAttributes: new { @class = "btn btn-primary" })
        </div>
        <div class="chat-message" id="user-message" style="overflow-y: scroll; height: 500px;">
            @foreach (var chat in Model)
            {
                <div class="chat-message">
                    <div class="ms-1">
                        <div>
                            <strong>@chat.FromUserName</strong>
                            <span> - @chat.Date</span>
                        </div>
                        @chat.Message
                    </div>
                    <div class="text-bg-danger p-1">
                        Raspberry Pi Response: @chat.Response
                    </div>
                </div>
            }
        </div>
        @*@using (Html.BeginForm("SendCommand2Rasp", "Rasp", FormMethod.Post, new { @class = "chat-input" }))
        {
            <input type="text" id="message-input" placeholder="Nhập tin nhắn..." name="message">
            <button type="submit" id="send-message">Gửi</button>
        }*@
        <div class="chat-input">
            <input type="text" id="message-input" />
            <input class ="btn btn-primary" type="button" id="sendmessage" value="Send"/>
        </div>
    </div>
</body>
</html>

@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.4.3.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message, date, response) {
                // Add the message to the page.
                $('#user-message').append('<div class="chat-message"><div class="ms-1"><div><strong>'
                    + htmlEncode(name) + '</strong><span>' + ' - ' + htmlEncode(date)
                    + '</span></div>'
                    + htmlEncode(message)
                    + '</div><div class="text-bg-danger p-1">Raspberry Pi Response: '
                    + htmlEncode(response)
                    + '</div></div>');
            };
            // Set initial focus to message input box.
            $('#message-input').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {
                    console.log("send message");
                    // Call the Send method on the hub.
                    Name = '@Session["Username"]';
                    chat.server.rasp(Name, $('#message-input').val());
                    // Clear text box and reset focus for next comment.
                    $('#message-input').val('').focus();
                });
            });
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div/>').text(value).html();
            return encodedValue;
        }
    </script>
}